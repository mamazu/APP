package breakthroughPP.player.ai;

import breakthroughPP.player.AbstractPlayer;
import breakthroughPP.preset.*;

import java.util.ArrayList;

/**
 * Class AbstractAI
 *
 * @author Philipp Thurow
 */

public abstract class AbstractAI extends AbstractPlayer {

    /**
     * Constructor for the AI if the board dimensions are known
     *
     * @param width  width of the board
     * @param height height of the board
     * @param color  color of the player
     */
    public AbstractAI(int width, int height, int color) {
        super(width, height, color);
    }

    /**
     * Method to calculate the situation to hit other stones , S(r) for the red stones
     *
     * @return  calculation of the situation for red stones
     */

    public int hitRed() {
        return (board.getRedCount() - board.getBlueCount());
    }

    /**
     * Method to calculate the situation to hit other stones , S(b) for the blue stones
     *
     * @return calculation of the situation for blue stones
     */

    public int hitBlue() {
        return (0 - hitRed());
    }

    /**
     * Method to calculate how to break through the enemy lines as red C(r)
     *
     * @return calculation of the situation how to break through the enemy lines
     */

    public int breakRed() {
        int zBlue = 0;
        int zRed = 0; // zRed is the count of the columns where only red stones or empty fields are
        int colBlueNow = 0;
        int colRedNow = 0; // count of blue and red stones in the actual column
        for (int j = 0; j < board.WIDTH; j++) {
            for (int i = 0; i < board.HEIGHT; i++) {
                if (board.getMap()[i][j] == 0) {
                    colRedNow = colRedNow + 1;
                }
                if (board.getMap()[i][j] == 1) {
                    colBlueNow = colBlueNow + 1;
                }
            }
            if (colRedNow > 0 && colBlueNow == 0) {
                zRed = zRed + 1;
            }
            if (colBlueNow > 0 && colRedNow == 0) {
                zBlue = zBlue + 1;
            }
            colBlueNow = colRedNow = 0;
        }
        return (zRed - zBlue);
    }

    /**
     * Method to calculate how to break through the enemy lines as blue C(b)
     *
     * @return calculation of the situation how to break through the enemy lines as blue
     */

    public int breakBlue() {
        return (0 - breakRed());
    }

    /**
     * Method to calculate the situation how close to the baseline of blue the closest red stone is F(r)
     *
     * @return calculation of the situation how close to the baseline of blue the closest red stone is
     */

    public int baseRed() {
        int xRed = board.HEIGHT - 1;
        int xBlue = board.HEIGHT - 1;
        for (int i = 0; i < board.HEIGHT; i++) {
            for (int j = 0; j < board.WIDTH; j++) {
                if (board.getMap()[i][j] == 0 && (board.HEIGHT - i - 1) < xRed) {
                    xRed = board.HEIGHT - i - 1;
                }
                if (board.getMap()[i][j] == 1 && (i) < xBlue) {
                    xBlue = i;
                }
            }
        }
        return (xBlue - xRed);
    }

    /**
     * Method to calculate the situation how close to the baseline of red the closest blue stone is F(b)
     *
     * @return calculation of the situation how close to the baseline of red the closest blue stone is
     */

    public int baseBlue() {
        return (0 - baseRed());
    }

    /**
     * Method to calculate the situation overall for red
     *
     * @return calculation of the situation overall for the actual board for red
     */

    public int overRed() {
        return (baseRed() + 2 * hitRed() + 5 * breakRed());
    }

    /**
     * Method to calculate the situation overall for blue
     *
     * @return calculation of the situation overall for the actual board for blue
     */

    public int overBlue() {
        return (baseBlue() + 2 * hitBlue() + 5 * breakBlue());
    }

    /**
     * Method to test if there is a winning move possible for the actual player , if not null getting returned
     *
     * @param colorNow the color of the moving player
     * @return a winning move or null if there is none
     */

    protected Move getWinningMove(int colorNow) throws PresetException {
        int blueNow = board.getBlueCount();
        int redNow = board.getRedCount();
        int blueNext;
        int redNext;
        ArrayList<Move> now = board.getPossibleMoves(colorNow);
        for (Move aMove : now) {
            if (!board.executeMove(aMove))
                continue;
            blueNext = board.getBlueCount();
            redNext = board.getRedCount();
            Status statNext = board.checkStatus();
            switch (colorNow) {
                case Setting.BLUE:
                    if (statNext.getStatus() == Setting.BLUE_WIN) {
                        undoMove(aMove, blueNow, blueNext, redNow, redNext);
                        return aMove;
                    }
                case Setting.RED:
                    if (statNext.getStatus() == Setting.RED_WIN) {
                        undoMove(aMove, blueNow, blueNext, redNow, redNext);
                        return aMove;
                    }
            }
            undoMove(aMove, blueNow, blueNext, redNow, redNext);
        }
        return null;
    }

    /**
     * Method to undo moves on the board
     *
     * @param m move object from end to start
     */

    protected void undoMove(Move m, int blueNow, int blueNext, int redNow, int redNext) {
        Position end = m.getEnd();
        Position start = m.getStart();
        if (end.getLetter() > start.getLetter() || end.getLetter() < start.getLetter()) {
            if ((end.getNumber() > start.getNumber()) && blueNext < blueNow) {
                board.setPlayer(end, Setting.BLUE);
                board.incrementBlue();
                board.setPlayer(start, Setting.RED);
                board.changePlayer();
            }
            if ((end.getNumber() > start.getNumber()) && blueNext == blueNow) {
                board.setPlayer(end, Setting.NONE);
                board.setPlayer(start, Setting.RED);
                board.changePlayer();
            }
            if ((end.getNumber() < start.getNumber()) && redNext < redNow) {
                board.setPlayer(end, Setting.RED);
                board.incrementRed();
                board.setPlayer(start, Setting.BLUE);
                board.changePlayer();
            }
            if ((end.getNumber() < start.getNumber()) && redNext == redNow) {
                board.setPlayer(end, Setting.NONE);
                board.setPlayer(start, Setting.BLUE);
                board.changePlayer();
            }
        } else {
            if (end.getNumber() > start.getNumber()) {
                board.setPlayer(end, Setting.NONE);
                board.setPlayer(start, Setting.RED);
                board.changePlayer();
            } else {
                board.setPlayer(end, Setting.NONE);
                board.setPlayer(start, Setting.BLUE);
                board.changePlayer();
            }
        }
    }

}
